// setup global colors
form.semanticForms.light {
  --formBackgroundColor: #fff;
  --formSubBackgroundColor: #f5f5f5;
  --formTextColor: #000;
  --buttonBackgroundColor: #f5f5f5;
  --borderColor: #c0c0c0;
  --subBorderColor: #c0c0c0;
  --placeholderColor: #aaa;
}

form.semanticForms.dark {
  --formBackgroundColor: #555;
  --formSubBackgroundColor: #2f2f2f;
  --formTextColor: #fff;
  --buttonBackgroundColor: #373737;
  --borderColor: #555;
  --subBorderColor: #3f3f3f;
  --placeholderColor: #aaa;
}

// global override
form.semanticForms * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  list-style-type: none;
  font-family: sans-serif;
}

form.semanticForms {
  color: var(--formTextColor);
  width: 100%;

  fieldset {
    border-radius: 10px;
    padding: 20px 10px;
    margin-bottom: 25px;
    background: var(--formSubBackgroundColor);
    border: 1px var(--subBorderColor) solid;

    dl {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: 25px;

      @media screen and (max-width: 768px) {
        grid-template-columns: 1fr 1fr;
      }

      @media screen and (max-width: 450px) {
        grid-template-columns: 1fr;
      }

      dd:not(.checkboxes):not(.radios).singleCheckbox {
        label {
          margin-top: 10px;
        }

        input {
          margin: 10px 10px 0 0;
        }
      }
    }
  }

  menu {
    display: flex;
    justify-content: space-between;
    padding: 5px;
  }

  // adjust checkbox and radios labels
  dt {
    position: relative;

    label[data-for="checkboxes"],
    label[data-for="radios"] {
      position: absolute;
      transform: translateY(-100%) scale(0.75);
    }
  }

  .checkboxes ul,
  .radios ul {
    padding-left: 10px;
  }

  // style all input types
  input:not([type='submit']):not([type='reset']):not([type='image']):not([type=checkbox]):not([type=radio]),
  select,
  textarea {
    background: var(--formBackgroundColor);
    border: 1px var(--borderColor) solid;
    color: var(--formTextColor);
    width: 100%;
    border-radius: 5px;
    font-size: 16px;
    padding: 8px;

    &:focus + label,
    &:not(:placeholder-shown) + label {
      transform: translateY(-150%) scale(0.75);
    }
  }

  textarea {
    height: 100px;
  }

  // specific styling for color
  input[type=color] {
    padding: 4px !important;
    height: 38.5px;
  }

  // button styling
  input[type='submit'],
  input[type='reset'],
  input[type='image'],
  button {
    background: var(--buttonBackgroundColor);
    color: var(--formTextColor);
    border-radius: 5px;
    padding: 5px;
    color: var(--formTextColor);
    border: 2px var(--borderColor) solid;
  }

  label {
    color: var(--placeholderColor);
  }

  // select {
  //   background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23fff'%3E%3Cpolygon stroke='%23fff' points='0,0 100,0 50,50'/%3E%3C/svg%3E");
  // }

  // style placeholders
  input, textarea {
    &::placeholder {
      color: var(--placeholderColor);
      opacity: 1;
    }
  }

  input:not(:placeholder-shown) + label,
  input:focus + label,
  textarea:not(:placeholder-shown) + label,
  textarea:focus + label,
  select + label.floatLabelFormAnimatedLabel,
  .checkboxes label.floatLabelFormAnimatedLabel,
  .radios label.floatLabelFormAnimatedLabel,
  dt > label {
    color: var(--formTextColor);
  }

  // animated labels
  .floatLabelForm {
    div {
      position: relative;

      dd:not(.singleCheckbox) {
        > label {
          position: absolute;
          transform-origin: left center;
          pointer-events: none;
          top: 8px;
          left: 8px;
          transition: transform 250ms;
          cursor: text;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }

        input, textarea {
          // hide placeholder content until input is focused
          &::placeholder {
            opacity: 0;
            transition: inherit;
          }

          &::-moz-placeholder {
            opacity: 0;
            transition: inherit;
          }

          &::-webkit-input-placeholder {
            opacity: 0;
            transition: inherit;
          }

          &:-ms-input-placeholder {
            opacity: 0;
            transition: inherit;
          }

          // show placeholder content when focused
          &:focus {
            &::placeholder {
              opacity: 1;
            }

            &::-moz-placeholder {
              opacity: 1;
            }

            &::-webkit-input-placeholder {
              opacity: 1;
            }

            &:-ms-input-placeholder {
              opacity: 1;
            }
          }
        }
      }
    }
  }
}